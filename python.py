import streamlit as st
import json
import math
import io
import time
from typing import List, Dict, Any, Optional

# --- C·∫•u H√¨nh Gemini API (Gemini API Configuration) ---
# S·ª≠ d·ª•ng m√¥ h√¨nh gemini-2.5-flash-preview-05-20 cho vi·ªác tr√≠ch xu·∫•t (JSON Schema) v√† ph√¢n t√≠ch
API_KEY = "" # API Key s·∫Ω ƒë∆∞·ª£c Canvas cung c·∫•p t·ª± ƒë·ªông.
API_URL_BASE = "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent"

# --- H√†m Helpers cho API (API Helper Functions) ---

def fetch_with_retry(payload: Dict[str, Any], max_retries: int = 5) -> Optional[Dict[str, Any]]:
    """Th·ª±c hi·ªán g·ªçi API v·ªõi c∆° ch·∫ø exponential backoff."""
    headers = {'Content-Type': 'application/json'}
    
    for attempt in range(max_retries):
        try:
            # T√™n bi·∫øn __api_key ƒë∆∞·ª£c s·ª≠ d·ª•ng thay cho API_KEY ƒë·ªÉ t√≠ch h·ª£p v·ªõi Canvas
            response = st.runtime.legacy_caching.request(
                API_URL_BASE,
                method='POST',
                headers=headers,
                data=json.dumps(payload),
                params={'key': API_KEY}
            )

            response.raise_for_status()
            return response.json()
        except Exception as e:
            if attempt < max_retries - 1:
                sleep_time = 2 ** attempt
                #st.warning(f"L·ªói khi g·ªçi API (l·∫ßn {attempt + 1}/{max_retries}). Th·ª≠ l·∫°i sau {sleep_time}s...")
                time.sleep(sleep_time)
            else:
                st.error(f"L·ªói: Kh√¥ng th·ªÉ g·ªçi API sau {max_retries} l·∫ßn th·ª≠. Chi ti·∫øt: {e}")
                return None
    return None

def ai_extract_data(document_text: str) -> Optional[Dict[str, float]]:
    """S·ª≠ d·ª•ng Gemini ƒë·ªÉ tr√≠ch xu·∫•t d·ªØ li·ªáu t√†i ch√≠nh d∆∞·ªõi d·∫°ng JSON c√≥ c·∫•u tr√∫c."""
    
    system_prompt = (
        "B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch t√†i ch√≠nh. H√£y tr√≠ch xu·∫•t c√°c th√¥ng tin t√†i ch√≠nh sau t·ª´ vƒÉn b·∫£n k·∫ø ho·∫°ch kinh doanh "
        "ƒë√£ cung c·∫•p v√† tr·∫£ v·ªÅ d∆∞·ªõi d·∫°ng ƒë·ªëi t∆∞·ª£ng JSON. ƒê·∫£m b·∫£o t·∫•t c·∫£ c√°c gi√° tr·ªã ƒë·ªÅu l√† s·ªë (number) "
        "ho·∫∑c s·ªë th·∫≠p ph√¢n (decimal). C√°c gi√° tr·ªã WACC v√† TaxRate ph·∫£i ·ªü d·∫°ng th·∫≠p ph√¢n (v√≠ d·ª•: 0.10 cho 10%)."
    )

    user_query = f"VƒÉn b·∫£n k·∫ø ho·∫°ch kinh doanh:\n\n---\n{document_text}\n---"

    payload = {
        "contents": [{"parts": [{"text": user_query}]}],
        "systemInstruction": {"parts": [{"text": system_prompt}]},
        "generationConfig": {
            "responseMimeType": "application/json",
            "responseSchema": {
                "type": "OBJECT",
                "properties": {
                    "InitialInvestment": {"type": "NUMBER", "description": "T·ªïng v·ªën ƒë·∫ßu t∆∞ ban ƒë·∫ßu c·ªßa d·ª± √°n (s·ªë √¢m)."},
                    "ProjectLifeYears": {"type": "INTEGER", "description": "D√≤ng ƒë·ªùi d·ª± √°n theo nƒÉm."},
                    "AnnualRevenue": {"type": "NUMBER", "description": "Doanh thu h√†ng nƒÉm (gi·∫£ ƒë·ªãnh l√† c·ªë ƒë·ªãnh)."},
                    "AnnualCost": {"type": "NUMBER", "description": "Chi ph√≠ ho·∫°t ƒë·ªông h√†ng nƒÉm (ch∆∞a bao g·ªìm thu·∫ø)."},
                    "WACC": {"type": "NUMBER", "description": "Chi ph√≠ v·ªën b√¨nh qu√¢n (WACC) d∆∞·ªõi d·∫°ng th·∫≠p ph√¢n (v√≠ d·ª•: 0.12)."},
                    "TaxRate": {"type": "NUMBER", "description": "Thu·∫ø su·∫•t doanh nghi·ªáp d∆∞·ªõi d·∫°ng th·∫≠p ph√¢n (v√≠ d·ª•: 0.20)."},
                },
                "required": ["InitialInvestment", "ProjectLifeYears", "AnnualRevenue", "AnnualCost", "WACC", "TaxRate"]
            }
        }
    }

    result = fetch_with_retry(payload)
    if result and result.get('candidates'):
        try:
            json_text = result['candidates'][0]['content']['parts'][0]['text']
            return json.loads(json_text)
        except (json.JSONDecodeError, KeyError, IndexError) as e:
            st.error(f"L·ªói ph√¢n t√≠ch c√∫ ph√°p JSON t·ª´ AI. Vui l√≤ng ki·ªÉm tra n·ªôi dung file Word c·ªßa b·∫°n. Chi ti·∫øt l·ªói: {e}")
            return None
    return None

def ai_analyze_results(npv: float, irr: float, pp: float, dpp: float, cash_flow_table: List[Dict[str, Any]]) -> str:
    """S·ª≠ d·ª•ng Gemini ƒë·ªÉ ph√¢n t√≠ch c√°c ch·ªâ s·ªë hi·ªáu qu·∫£ d·ª± √°n."""
    
    system_prompt = (
        "B·∫°n l√† m·ªôt Gi√°m ƒë·ªëc T√†i ch√≠nh (CFO) c·∫•p cao. D·ª±a tr√™n c√°c ch·ªâ s·ªë t√†i ch√≠nh v√† b·∫£ng d√≤ng ti·ªÅn ƒë∆∞·ª£c cung c·∫•p, "
        "h√£y ƒë∆∞a ra m·ªôt b·∫£n ph√¢n t√≠ch chuy√™n nghi·ªáp v√† to√†n di·ªán v·ªÅ hi·ªáu qu·∫£ kinh t·∫ø c·ªßa d·ª± √°n. "
        "ƒê√°nh gi√° t√≠nh kh·∫£ thi (th√¥ng qua NPV v√† IRR), r·ªßi ro (th√¥ng qua th·ªùi gian ho√†n v·ªën), v√† ƒë∆∞a ra khuy·∫øn ngh·ªã r√µ r√†ng. "
        "Vi·∫øt to√†n b·ªô n·ªôi dung ph√¢n t√≠ch b·∫±ng ti·∫øng Vi·ªát."
    )

    analysis_data = {
        "NPV": f"{npv:,.2f}",
        "IRR": f"{irr*100:,.2f}%",
        "PaybackPeriod_Years": f"{pp:,.2f}",
        "DiscountedPaybackPeriod_Years": f"{dpp:,.2f}",
        "CashFlowTableSnapshot": cash_flow_table
    }

    user_query = f"Ph√¢n t√≠ch d·ª± √°n v·ªõi d·ªØ li·ªáu sau:\n\n{json.dumps(analysis_data, indent=2)}"

    payload = {
        "contents": [{"parts": [{"text": user_query}]}],
        "systemInstruction": {"parts": [{"text": system_prompt}]},
    }
    
    result = fetch_with_retry(payload)
    if result and result.get('candidates'):
        try:
            return result['candidates'][0]['content']['parts'][0]['text']
        except (KeyError, IndexError) as e:
            return "Kh√¥ng th·ªÉ l·∫•y k·∫øt qu·∫£ ph√¢n t√≠ch t·ª´ AI. Vui l√≤ng th·ª≠ l·∫°i."
    return "L·ªói k·∫øt n·ªëi ho·∫∑c kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ AI."

# --- H√†m T√≠nh To√°n T√†i Ch√≠nh (Financial Calculation Functions) ---

def calculate_npv(rate: float, cash_flows: List[float]) -> float:
    """T√≠nh Gi√° tr·ªã Hi·ªán t·∫°i Thu·∫ßn (Net Present Value - NPV)."""
    npv = 0.0
    for t, cf in enumerate(cash_flows):
        # t = 0 l√† nƒÉm ƒë·∫ßu t∆∞, t > 0 l√† d√≤ng ti·ªÅn t·ª´ ho·∫°t ƒë·ªông
        npv += cf / (1 + rate) ** t
    return npv

def calculate_irr(cash_flows: List[float]) -> float:
    """
    T√≠nh T·ª∑ su·∫•t Ho√†n v·ªën N·ªôi b·ªô (Internal Rate of Return - IRR).
    L∆∞u √Ω: Kh√¥ng th·ªÉ s·ª≠ d·ª•ng NumPy.IRR, n√™n s·∫Ω s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p ƒëo√°n/l·∫∑p ƒë∆°n gi·∫£n
    ho·∫∑c d√πng gi√° tr·ªã ∆∞·ªõc t√≠nh an to√†n (gi·∫£ ƒë·ªãnh IRR = WACC + 2% n·∫øu NPV > 0).
    Trong m√¥i tr∆∞·ªùng th·ª±c t·∫ø, c·∫ßn th∆∞ vi·ªán nh∆∞ numpy.
    ·ªû ƒë√¢y, t√¥i s·∫Ω d√πng ph∆∞∆°ng ph√°p x·∫•p x·ªâ ƒë∆°n gi·∫£n:
    """
    if not cash_flows or cash_flows[0] >= 0:
        return 0.0 # Kh√¥ng c√≥ ƒë·∫ßu t∆∞ ban ƒë·∫ßu ho·∫∑c d√≤ng ti·ªÅn kh√¥ng h·ª£p l·ªá

    # Ph∆∞∆°ng ph√°p x·∫•p x·ªâ ƒë∆°n gi·∫£n: Th·ª≠ c√°c m·ª©c l√£i su·∫•t t·ª´ 0% ƒë·∫øn 100%
    low_rate, high_rate = 0.0, 1.0
    
    # Ki·ªÉm tra gi·ªõi h·∫°n
    if calculate_npv(low_rate, cash_flows) < 0:
        return -1.0 # D·ª± √°n NPV √¢m ngay c·∫£ ·ªü 0%

    for _ in range(100): # 100 l·∫ßn l·∫∑p ƒë·ªÉ t√¨m ki·∫øm nh·ªã ph√¢n
        mid_rate = (low_rate + high_rate) / 2
        npv = calculate_npv(mid_rate, cash_flows)
        if abs(npv) < 0.0001:
            return mid_rate
        if npv > 0:
            low_rate = mid_rate
        else:
            high_rate = mid_rate
    return low_rate

def calculate_payback_periods(initial_investment: float, cash_flows_operating: List[float], wacc: float) -> tuple[float, float]:
    """T√≠nh Th·ªùi gian Ho√†n v·ªën (PP) v√† Th·ªùi gian Ho√†n v·ªën c√≥ chi·∫øt kh·∫•u (DPP)."""
    
    # D√≤ng ti·ªÅn ho√†n v·ªën (ch·ªâ t√≠nh d√≤ng ti·ªÅn d∆∞∆°ng sau nƒÉm 0)
    cumulative_cf = -initial_investment
    payback_period = 0.0
    
    # D√≤ng ti·ªÅn chi·∫øt kh·∫•u ho√†n v·ªën
    cumulative_dcf = -initial_investment
    discounted_payback_period = 0.0
    
    cf_data = []

    for t, cf in enumerate(cash_flows_operating, start=1):
        
        # 1. T√≠nh PP (Payback Period)
        if payback_period == 0.0:
            if cumulative_cf + cf >= 0:
                # T√≠nh ph·∫ßn nƒÉm
                payback_period = t - 1 + abs(cumulative_cf) / cf
            else:
                cumulative_cf += cf

        # 2. T√≠nh DPP (Discounted Payback Period)
        discount_factor = 1 / (1 + wacc) ** t
        dcf = cf * discount_factor

        if discounted_payback_period == 0.0:
            if cumulative_dcf + dcf >= 0:
                # T√≠nh ph·∫ßn nƒÉm
                discounted_payback_period = t - 1 + abs(cumulative_dcf) / dcf
            else:
                cumulative_dcf += dcf
                
    return payback_period, discounted_payback_period


# --- Giao Di·ªán Streamlit (Streamlit UI) ---

def main():
    st.set_page_config(
        page_title="ƒê√°nh Gi√° Ph∆∞∆°ng √Ån Kinh Doanh (Streamlit & Gemini)",
        layout="wide",
        initial_sidebar_state="expanded"
    )

    st.title("üí∞ ·ª®ng D·ª•ng ƒê√°nh Gi√° Hi·ªáu Qu·∫£ D·ª± √Ån Kinh Doanh")
    st.markdown("""
    ·ª®ng d·ª•ng s·ª≠ d·ª•ng m√¥ h√¨nh Gemini ƒë·ªÉ **tr√≠ch xu·∫•t th√¥ng tin t√†i ch√≠nh** t·ª´ vƒÉn b·∫£n v√† **ph√¢n t√≠ch c√°c ch·ªâ s·ªë** hi·ªáu qu·∫£ d·ª± √°n.
    """)
    st.divider()

    # --- Ph·∫ßn 1: T·∫£i File v√† L·ªçc D·ªØ Li·ªáu AI ---
    
    st.header("1. L·ªçc D·ªØ Li·ªáu T√†i Ch√≠nh t·ª´ VƒÉn B·∫£n")

    uploaded_file = st.file_uploader(
        "T·∫£i l√™n File K·∫ø Ho·∫°ch Kinh Doanh (Khuy·∫øn ngh·ªã s·ª≠ d·ª•ng file .txt ho·∫∑c .md, ho·∫∑c paste n·ªôi dung t·ª´ Word):",
        type=['txt', 'md', 'docx']
    )

    document_text = ""
    if uploaded_file is not None:
        try:
            # ƒê·ªçc n·ªôi dung file. L∆∞u √Ω: Docx reader kh√¥ng ho·∫°t ƒë·ªông trong m√¥i tr∆∞·ªùng n√†y.
            # Ta s·∫Ω ƒë·ªçc file d∆∞·ªõi d·∫°ng text thu·∫ßn t√∫y.
            document_text = uploaded_file.getvalue().decode("utf-8")
        except Exception:
            # N·∫øu kh√¥ng ph·∫£i UTF-8, th·ª≠ ƒë·ªçc nh·ªã ph√¢n v√† hi·ªÉn th·ªã c·∫£nh b√°o
            st.warning("Kh√¥ng th·ªÉ gi·∫£i m√£ file d∆∞·ªõi d·∫°ng UTF-8. Vui l√≤ng ƒë·∫£m b·∫£o n·ªôi dung l√† vƒÉn b·∫£n thu·∫ßn t√∫y.")
            document_text = "N·ªôi dung kh√¥ng ƒë·ªçc ƒë∆∞·ª£c."
            
        st.subheader("N·ªôi dung VƒÉn b·∫£n ƒë∆∞·ª£c t·∫£i l√™n:")
        st.text_area("VƒÉn b·∫£n g·ªëc", document_text, height=300)

    # N√∫t b·∫•m ƒë·ªÉ th·ª±c hi·ªán tr√≠ch xu·∫•t d·ªØ li·ªáu
    if st.button("Tr√≠ch Xu·∫•t D·ªØ Li·ªáu T√†i Ch√≠nh B·∫±ng AI", key="extract_button"):
        if document_text and document_text != "N·ªôi dung kh√¥ng ƒë·ªçc ƒë∆∞·ª£c.":
            with st.spinner("AI ƒëang ƒë·ªçc v√† tr√≠ch xu·∫•t c√°c th√¥ng s·ªë t√†i ch√≠nh..."):
                extracted_data = ai_extract_data(document_text)
            
            if extracted_data:
                # L∆∞u d·ªØ li·ªáu v√†o session state ƒë·ªÉ d√πng cho c√°c b∆∞·ªõc sau
                st.session_state['extracted_data'] = extracted_data
                st.success("Tr√≠ch xu·∫•t d·ªØ li·ªáu th√†nh c√¥ng!")
            else:
                st.error("Kh√¥ng th·ªÉ tr√≠ch xu·∫•t d·ªØ li·ªáu. Vui l√≤ng ki·ªÉm tra l·∫°i n·ªôi dung file v√† th·ª≠ l·∫°i.")
        else:
            st.warning("Vui l√≤ng t·∫£i l√™n m·ªôt file ho·∫∑c ƒë·∫£m b·∫£o n·ªôi dung vƒÉn b·∫£n kh√¥ng tr·ªëng.")
            
    # --- Hi·ªÉn th·ªã v√† Ch·ªânh S·ª≠a D·ªØ Li·ªáu ƒê√£ L·ªçc ---
    
    if 'extracted_data' in st.session_state:
        st.subheader("Tham S·ªë D·ª± √Ån (ƒê√£ L·ªçc v√† C√≥ Th·ªÉ Ch·ªânh S·ª≠a):")
        
        data = st.session_state['extracted_data']
        
        # T·∫°o giao di·ªán nh·∫≠p li·ªáu ƒë·ªÉ ng∆∞·ªùi d√πng ki·ªÉm tra v√† ch·ªânh s·ª≠a
        col1, col2, col3 = st.columns(3)
        
        with col1:
            data['InitialInvestment'] = st.number_input(
                "V·ªën ƒê·∫ßu T∆∞ Ban ƒê·∫ßu (C0, Gi√° tr·ªã √¢m):", 
                value=float(data.get('InitialInvestment', 0)), 
                step=100000.0, 
                format="%.2f",
                key='C0_input'
            )
            data['AnnualRevenue'] = st.number_input(
                "Doanh Thu H√†ng NƒÉm (Gross Revenue):", 
                value=float(data.get('AnnualRevenue', 0)), 
                step=100000.0, 
                format="%.2f",
                key='Rev_input'
            )
        
        with col2:
            data['ProjectLifeYears'] = st.number_input(
                "D√≤ng ƒê·ªùi D·ª± √Ån (NƒÉm):", 
                value=int(data.get('ProjectLifeYears', 0)), 
                min_value=1, 
                step=1,
                key='Life_input'
            )
            data['AnnualCost'] = st.number_input(
                "Chi Ph√≠ H√†ng NƒÉm (Operating Cost):", 
                value=float(data.get('AnnualCost', 0)), 
                step=100000.0, 
                format="%.2f",
                key='Cost_input'
            )
            
        with col3:
            data['WACC'] = st.number_input(
                "WACC (Chi Ph√≠ V·ªën, d·∫°ng th·∫≠p ph√¢n):", 
                value=float(data.get('WACC', 0.10)), 
                min_value=0.001, 
                max_value=1.0, 
                step=0.01,
                format="%.4f",
                key='WACC_input'
            )
            data['TaxRate'] = st.number_input(
                "Thu·∫ø Su·∫•t (d·∫°ng th·∫≠p ph√¢n):", 
                value=float(data.get('TaxRate', 0.20)), 
                min_value=0.0, 
                max_value=1.0, 
                step=0.01,
                format="%.4f",
                key='Tax_input'
            )

        # C·∫≠p nh·∫≠t l·∫°i session state sau khi ch·ªânh s·ª≠a
        st.session_state['extracted_data'] = data
        
        # --- Ph·∫ßn 2 & 3: X√¢y D·ª±ng B·∫£ng D√≤ng Ti·ªÅn & T√≠nh To√°n Ch·ªâ S·ªë ---
        st.divider()
        st.header("2 & 3. X√¢y D·ª±ng D√≤ng Ti·ªÅn v√† T√≠nh To√°n Ch·ªâ S·ªë Hi·ªáu Qu·∫£")

        # Chu·∫©n b·ªã d·ªØ li·ªáu
        C0 = data['InitialInvestment']
        N = int(data['ProjectLifeYears'])
        R = data['AnnualRevenue']
        OC = data['AnnualCost']
        WACC = data['WACC']
        T = data['TaxRate']
        
        # D√≤ng ti·ªÅn h√†ng nƒÉm (Operating Cash Flow - OCF)
        EBIT = R - OC # L·ª£i nhu·∫≠n tr∆∞·ªõc thu·∫ø v√† l√£i su·∫•t (Gi·∫£ ƒë·ªãnh kh√¥ng c√≥ kh·∫•u hao)
        Tax = EBIT * T if EBIT > 0 else 0
        NPAT = EBIT - Tax # L·ª£i nhu·∫≠n sau thu·∫ø (Net Profit After Tax)
        # OCF = NPAT + Kh·∫•u hao - Thay ƒë·ªïi v·ªën l∆∞u ƒë·ªông (Gi·∫£ ƒë·ªãnh Kh·∫•u hao v√† Thay ƒë·ªïi v·ªën l∆∞u ƒë·ªông = 0)
        OCF = NPAT 

        # X√¢y d·ª±ng b·∫£ng d√≤ng ti·ªÅn
        cash_flow_table: List[Dict[str, Any]] = []
        cash_flows_for_npv_irr = [] # D√≤ng ti·ªÅn r√≤ng cho t√≠nh to√°n NPV/IRR
        
        # NƒÉm 0 (ƒê·∫ßu t∆∞ ban ƒë·∫ßu)
        cash_flow_table.append({
            'Year': 0,
            'Revenue': 0.0,
            'Operating Cost': 0.0,
            'EBIT': 0.0,
            'Tax': 0.0,
            'OCF': 0.0,
            'Investment': C0,
            'Net Cash Flow': C0,
            'Discount Factor': 1.0,
            'Discounted Cash Flow': C0
        })
        cash_flows_for_npv_irr.append(C0)

        # C√°c nƒÉm ho·∫°t ƒë·ªông (NƒÉm 1 ƒë·∫øn N)
        for year in range(1, N + 1):
            discount_factor = 1 / (1 + WACC) ** year
            net_cf = OCF # Net Cash Flow = OCF (Gi·∫£ ƒë·ªãnh kh√¥ng c√≥ v·ªën l∆∞u ƒë·ªông cu·ªëi k·ª≥)
            
            # Gi·∫£ ƒë·ªãnh: Thu h·ªìi v·ªën ƒë·∫ßu t∆∞ (Terminal Value) b·∫±ng 0, ho·∫∑c c√≥ gi√° tr·ªã thanh l√Ω. 
            # ƒê·ªÉ ƒë∆°n gi·∫£n, gi·∫£ ƒë·ªãnh kh√¥ng c√≥ gi√° tr·ªã thanh l√Ω.
            
            cash_flow_table.append({
                'Year': year,
                'Revenue': R,
                'Operating Cost': OC,
                'EBIT': EBIT,
                'Tax': Tax,
                'OCF': OCF,
                'Investment': 0.0,
                'Net Cash Flow': net_cf,
                'Discount Factor': discount_factor,
                'Discounted Cash Flow': net_cf * discount_factor
            })
            cash_flows_for_npv_irr.append(net_cf)
            
        # Hi·ªÉn th·ªã b·∫£ng d√≤ng ti·ªÅn
        st.subheader("B·∫£ng D√≤ng Ti·ªÅn D·ª± √Ån (Cash Flow Statement)")
        st.dataframe(
            cash_flow_table,
            column_order=['Year', 'Revenue', 'Operating Cost', 'EBIT', 'Tax', 'OCF', 'Investment', 'Net Cash Flow', 'Discount Factor', 'Discounted Cash Flow'],
            hide_index=True,
            use_container_width=True,
            column_config={
                'Year': st.column_config.NumberColumn("NƒÉm", format="%d"),
                'Revenue': st.column_config.NumberColumn("Doanh Thu", format="%.0f"),
                'Operating Cost': st.column_config.NumberColumn("Chi Ph√≠ Hƒê", format="%.0f"),
                'EBIT': st.column_config.NumberColumn("EBIT", format="%.0f"),
                'Tax': st.column_config.NumberColumn("Thu·∫ø", format="%.0f"),
                'OCF': st.column_config.NumberColumn("OCF", format="%.0f"),
                'Investment': st.column_config.NumberColumn("V·ªën ƒê·∫ßu T∆∞", format="%.0f"),
                'Net Cash Flow': st.column_config.NumberColumn("D√≤ng Ti·ªÅn R√≤ng (CF)", format="%.0f"),
                'Discount Factor': st.column_config.NumberColumn("H·ªá S·ªë Chi·∫øt Kh·∫•u", format="%.4f"),
                'Discounted Cash Flow': st.column_config.NumberColumn("D√≤ng Ti·ªÅn Chi·∫øt Kh·∫•u (DCF)", format="%.0f"),
            }
        )

        # T√≠nh to√°n c√°c ch·ªâ s·ªë
        npv = calculate_npv(WACC, cash_flows_for_npv_irr)
        irr = calculate_irr(cash_flows_for_npv_irr)
        
        # D√≤ng ti·ªÅn ho·∫°t ƒë·ªông (b·ªè C0)
        cash_flows_operating = cash_flows_for_npv_irr[1:] 
        pp, dpp = calculate_payback_periods(abs(C0), cash_flows_operating, WACC)
        
        st.subheader("Ch·ªâ S·ªë ƒê√°nh Gi√° Hi·ªáu Qu·∫£ D·ª± √Ån")
        
        kpi_cols = st.columns(4)
        
        kpi_cols[0].metric("NPV (Gi√° tr·ªã hi·ªán t·∫°i thu·∫ßn)", f"{npv:,.0f}")
        kpi_cols[1].metric("IRR (T·ª∑ su·∫•t ho√†n v·ªën n·ªôi b·ªô)", f"{irr*100:,.2f}%", delta=f"WACC: {WACC*100:,.2f}%")
        kpi_cols[2].metric("PP (Th·ªùi gian ho√†n v·ªën)", f"{pp:,.2f} nƒÉm", delta_color="off")
        kpi_cols[3].metric("DPP (Ho√†n v·ªën c√≥ chi·∫øt kh·∫•u)", f"{dpp:,.2f} nƒÉm", delta_color="off")
        
        # L∆∞u k·∫øt qu·∫£ v√†o session state
        st.session_state['kpis'] = {
            'npv': npv, 
            'irr': irr, 
            'pp': pp, 
            'dpp': dpp, 
            'cash_flow_table_snapshot': cash_flow_table
        }
        
        # --- Ph·∫ßn 4: Ph√¢n T√≠ch Ch·ªâ S·ªë B·∫±ng AI ---
        st.divider()
        st.header("4. Ph√¢n T√≠ch Chuy√™n S√¢u C·ªßa AI")
        
        if st.button("Y√™u C·∫ßu AI Ph√¢n T√≠ch Hi·ªáu Qu·∫£ D·ª± √Ån", key="analyze_button"):
            if 'kpis' in st.session_state:
                with st.spinner("AI ƒëang ph√¢n t√≠ch c√°c ch·ªâ s·ªë t√†i ch√≠nh v√† l·∫≠p b√°o c√°o..."):
                    kpis = st.session_state['kpis']
                    analysis_text = ai_analyze_results(
                        kpis['npv'], 
                        kpis['irr'], 
                        kpis['pp'], 
                        kpis['dpp'], 
                        kpis['cash_flow_table_snapshot']
                    )
                
                st.subheader("B√°o C√°o Ph√¢n T√≠ch C·ªßa CFO AI")
                st.markdown(analysis_text)
            else:
                st.warning("Vui l√≤ng th·ª±c hi·ªán B∆∞·ªõc 1 v√† 2-3 tr∆∞·ªõc khi y√™u c·∫ßu ph√¢n t√≠ch.")

    st.divider()
    st.markdown("---")
    st.info("L∆∞u √Ω: C√°c ch·ªâ s·ªë IRR ƒë∆∞·ª£c t√≠nh to√°n b·∫±ng ph∆∞∆°ng ph√°p x·∫•p x·ªâ ƒë∆°n gi·∫£n. Trong m√¥i tr∆∞·ªùng th·ª±c t·∫ø, h√£y s·ª≠ d·ª•ng th∆∞ vi·ªán t√†i ch√≠nh chuy√™n nghi·ªáp.")

if __name__ == "__main__":
    main()
